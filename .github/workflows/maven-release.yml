# Reusable workflow for Maven releases of Java applications
# Location: github-workflows repo at .github/workflows/maven-release.yml
#mvn release:clean && sleep 1 && mvn -B clean release:prepare -DdryRun=true -Dresume=false 
    #&& sleep 1 &&mvn release:clean
#mvn release:clean && sleep 1 && mvn -B release:prepare -DpreparationGoals=validate 
    #&& sleep 1 && git push --tags && sleep 1 && git push && sleep 1 && git push --tags --dry-run && sleep 1 && mvn release:clean        

name: Maven Release

on:
  workflow_call:
    inputs:
      maven_profiles:
        default: ''
        type: string
        description: 'Maven profiles to activate (comma-separated)'
      release_version:
        required: false
        type: string
        description: 'Override release version (e.g., 1.0.0). If not specified, Maven will determine automatically'
      next_development_version:
        required: false
        type: string
        description: 'Override next development version (e.g., 1.1.0-SNAPSHOT). If not specified, Maven will determine automatically'
      dry_run:
        default: false
        type: boolean
        description: 'Perform a dry run (no actual release)'
      git_user_name:
        default: 'github-actions[bot]'
        type: string
        description: 'Git user name for commits'
      git_user_email:
        default: 'github-actions[bot]@users.noreply.github.com'
        type: string
        description: 'Git user email for commits'
    secrets:
      MAVEN_REPO_USERNAME:
        required: true
      MAVEN_REPO_PASSWORD:
        required: true

jobs:
  # Validate inputs
  validate-inputs:
    runs-on: arc-runners-javadev
    outputs:
      release_version: ${{ steps.validate.outputs.release_version }}
      next_version: ${{ steps.validate.outputs.next_version }}
      use_version_overrides: ${{ steps.validate.outputs.use_version_overrides }}
    steps:
      - name: Validate release inputs
        id: validate
        run: |
          RELEASE_VERSION="${{ inputs.release_version }}"
          NEXT_VERSION="${{ inputs.next_development_version }}"
          
          echo "üîç Validating release inputs..."
          echo "Dry run: ${{ inputs.dry_run }}"
          
          # Check if version overrides are provided
          if [ -n "${RELEASE_VERSION}" ] || [ -n "${NEXT_VERSION}" ]; then
            echo "üìù Version overrides provided"
            
            # If one version is provided, both must be provided
            if [ -z "${RELEASE_VERSION}" ] || [ -z "${NEXT_VERSION}" ]; then
              echo "‚ùå If providing version overrides, both release_version and next_development_version must be specified"
              exit 1
            fi
            
            echo "Release version override: ${RELEASE_VERSION}"
            echo "Next development version override: ${NEXT_VERSION}"
            
            # Validate release version format (should not contain SNAPSHOT)
            if [[ "${RELEASE_VERSION}" == *"SNAPSHOT"* ]]; then
              echo "‚ùå Release version should not contain SNAPSHOT"
              exit 1
            fi
            
            # Validate next development version format (should contain SNAPSHOT)
            if [[ "${NEXT_VERSION}" != *"SNAPSHOT"* ]]; then
              echo "‚ùå Next development version should contain SNAPSHOT"
              exit 1
            fi
            
            # Basic semver validation for release version
            if ! [[ "${RELEASE_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "‚ùå Release version should follow semver format (x.y.z)"
              exit 1
            fi
            
            echo "‚úÖ Release version override: ${RELEASE_VERSION}"
            echo "‚úÖ Next development version override: ${NEXT_VERSION}"
            echo "use_version_overrides=true" >> $GITHUB_OUTPUT
          else
            echo "ü§ñ No version overrides provided - Maven will determine versions automatically"
            echo "use_version_overrides=false" >> $GITHUB_OUTPUT
          fi
          
          echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
          echo "next_version=${NEXT_VERSION}" >> $GITHUB_OUTPUT

  # Perform Maven release
  maven-release:
    runs-on: arc-runners-javadev
    needs: validate-inputs
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5

      - uses: krystof-io/cache@v4.3.0-1.0.0
        with:
          path: ~/.m2/repository
          key: maven-cache-${{ github.run_id }}-${{ github.run_attempt }}
          restore-keys: |
            maven-cache-          
        env:
          RUNS_ON_S3_BUCKET_CACHE: 'runner-caches'
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_CACHE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_CACHE_SECRET_KEY }}
          RUNS_ON_S3_BUCKET_ENDPOINT: ${{ vars.S3_CACHE_ENDPOINT }}
          RUNS_ON_AWS_REGION: 'default'
          RUNS_ON_S3_FORCE_PATH_STYLE: 'true'

      - name: Configure Git
        run: |
          git config user.name "${{ inputs.git_user_name }}"
          git config user.email "${{ inputs.git_user_email }}"

      - name: Initialize Maven settings
        uses: s4u/maven-settings-action@v3.1.0
        with:
          servers: |
            [
            {"id": "private-snapshots", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"},
            {"id": "private-releases", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"},
            {"id": "nexus", "username": "${{ env.MAVEN_REPO_USERNAME }}", "password": "${{ env.MAVEN_REPO_PASSWORD }}"}
            ]
          mirrors: |
            [
            {"id": "nexus", "name":"nexus", "mirrorOf":"*", "url":"${{ env.MAVEN_REPO_URL }}"}
            ]
          sonatypeSnapshots: true          
        env:
          MAVEN_REPO_USERNAME: ${{ secrets.MAVEN_REPO_USERNAME }}
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
          MAVEN_REPO_URL: ${{ vars.MAVEN_REPO_URL }}

      - name: Verify project state
        run: |
          echo "üìã Current project state:"
          echo "Current version: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          echo "Project name: $(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)"
          echo "Group ID: $(mvn help:evaluate -Dexpression=project.groupId -q -DforceStdout)"
          
          # Verify we have maven-release-plugin configured
          if ! mvn help:describe -Dplugin=org.apache.maven.plugins:maven-release-plugin > /dev/null 2>&1; then
            echo "‚ö†Ô∏è  maven-release-plugin not found in pom.xml"
            echo "The plugin will be used with default configuration"
          else
            echo "‚úÖ maven-release-plugin is configured"
          fi

      - name: Create release branch
        if: ${{ !inputs.dry_run }}
        run: |
          if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
            RELEASE_VERSION="${{ needs.validate-inputs.outputs.release_version }}"
          else
            # Determine release version from pom.xml (remove -SNAPSHOT)
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
          fi
          
          BRANCH_NAME="release/${RELEASE_VERSION}"
          
          echo "üìù Creating release branch: ${BRANCH_NAME}"
          echo "üìù Will create tag: v${RELEASE_VERSION}"
          git checkout -b "${BRANCH_NAME}"
          git push origin "${BRANCH_NAME}"
          
          # Store the determined version for later steps
          echo "DETERMINED_RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Dry run - Show what would be released
        if: ${{ inputs.dry_run }}
        run: |
          echo "üîç DRY RUN MODE - No changes will be made"
          echo ""
          echo "Current version: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"
          
          PROFILES=""
          if [ -n "${{ inputs.maven_profiles }}" ]; then
            PROFILES="-P${{ inputs.maven_profiles }}"
          fi
          
          if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
            RELEASE_VERSION="${{ needs.validate-inputs.outputs.release_version }}"
            NEXT_VERSION="${{ needs.validate-inputs.outputs.next_version }}"
            echo "Would release (override): ${RELEASE_VERSION}"
            echo "Next dev version (override): ${NEXT_VERSION}"
            echo "Tag format: v${RELEASE_VERSION}"
            echo ""
            echo "Maven release:prepare simulation with version overrides:"
            
            mvn release:prepare -DdryRun=true \
              -DreleaseVersion=${RELEASE_VERSION} \
              -DdevelopmentVersion=${NEXT_VERSION} \
              -Dtag=v${RELEASE_VERSION} \
              -DpushChanges=false \
              ${PROFILES}
          else
            # Determine what Maven would use as release version
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            AUTO_RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
            
            echo "Would release: ${AUTO_RELEASE_VERSION} (Maven automatic)"
            echo "Next dev version: Maven will determine automatically"
            echo "Tag format: v${AUTO_RELEASE_VERSION}"
            echo ""
            echo "Maven release:prepare simulation (automatic versioning with v prefix):"
            
            mvn release:prepare -DdryRun=true \
              -Dtag=v${AUTO_RELEASE_VERSION} \
              -DpushChanges=false \
              ${PROFILES}
          fi
        env:
          MAVEN_REPO_USERNAME: ${{ secrets.MAVEN_REPO_USERNAME }}
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}

      - name: Perform Maven release
        if: ${{ !inputs.dry_run }}
        run: |
          echo "üöÄ Performing Maven release ..."
          
          PROFILES=""
          if [ -n "${{ inputs.maven_profiles }}" ]; then
            PROFILES="-P${{ inputs.maven_profiles }}"
          fi
          
          if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
            RELEASE_VERSION="${{ needs.validate-inputs.outputs.release_version }}"
            NEXT_VERSION="${{ needs.validate-inputs.outputs.next_version }}"
            echo "Using version overrides: ${RELEASE_VERSION} -> ${NEXT_VERSION}"
            
            # Maven release:prepare with version overrides
            mvn release:prepare \
              -DreleaseVersion=${RELEASE_VERSION} \
              -DdevelopmentVersion=${NEXT_VERSION} \
              -Dtag=v${RELEASE_VERSION} \
              -DpushChanges=false \
              -DremoteTagging=false \
              -DpreparationGoals=validate \
              ${PROFILES}
              
            # Store versions for later steps
            echo "FINAL_RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
            echo "FINAL_NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
          else
            echo "Using automatic Maven versioning with v prefix"
            
            # Determine what Maven would use as versions
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            AUTO_RELEASE_VERSION=${CURRENT_VERSION%-SNAPSHOT}
            
            # Maven release:prepare with explicit tag format to ensure v prefix
            mvn release:prepare \
              -Dtag=v${AUTO_RELEASE_VERSION} \
              -DpushChanges=false \
              -DremoteTagging=false \
              -DpreparationGoals=validate \
              ${PROFILES}
              
            # Get the new development version from pom.xml (after release:prepare)
            NEXT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            
            echo "Maven determined versions:"
            echo "  Release version: ${AUTO_RELEASE_VERSION}"
            echo "  Next dev version: ${NEXT_VERSION}"
            echo "  Tag: v${AUTO_RELEASE_VERSION}"
            
            # Store versions for later steps
            echo "FINAL_RELEASE_VERSION=${AUTO_RELEASE_VERSION}" >> $GITHUB_ENV
            echo "FINAL_NEXT_VERSION=${NEXT_VERSION}" >> $GITHUB_ENV
            echo "TAG_NAME=v${AUTO_RELEASE_VERSION}" >> $GITHUB_ENV
          fi
          
          echo "‚úÖ Maven release:prepare completed successfully"
        env:
          MAVEN_REPO_USERNAME: ${{ secrets.MAVEN_REPO_USERNAME }}
          MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}

      - name: Push release changes
        if: ${{ !inputs.dry_run }}
        run: |
          echo "üì§ Pushing release changes and tag..."
          
          # Determine the tag name
          if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
            TAG_TO_PUSH="v${FINAL_RELEASE_VERSION}"
          else
            # Use the tag that Maven created (might not have 'v' prefix)
            TAG_TO_PUSH=$(git tag --sort=-version:refname | head -1)
          fi
          
          # Show what we're about to push
          echo "Git status:"
          git status
          echo ""
          echo "Recent commits:"
          git log --oneline -5
          echo ""
          echo "Tags to push:"
          echo "  ${TAG_TO_PUSH}"
          git tag -l "${TAG_TO_PUSH}"
          
          # Push the release branch with version changes
          git push origin HEAD
          
          # Push the release tag with verbose output
          echo "üè∑Ô∏è  Pushing tag ${TAG_TO_PUSH}..."
          if git push -v origin "${TAG_TO_PUSH}"; then
            echo "‚úÖ Git push command completed"
          else
            echo "‚ùå Git push command failed"
            exit 1
          fi
          
          echo "PUSHED_TAG=${TAG_TO_PUSH}" >> $GITHUB_ENV

      - name: Create Pull Request
        if: ${{ !inputs.dry_run }}
        uses: actions/github-script@v7
        env:
          FINAL_RELEASE_VERSION: ${{ env.FINAL_RELEASE_VERSION }}
          FINAL_NEXT_VERSION: ${{ env.FINAL_NEXT_VERSION }}
          PUSHED_TAG: ${{ env.PUSHED_TAG }}
        with:
          script: |
            // Use environment variables (should always be set by the Maven release step)
            const releaseVersion = process.env.FINAL_RELEASE_VERSION || 'auto-determined';
            const nextVersion = process.env.FINAL_NEXT_VERSION || 'auto-determined';
            const pushedTag = process.env.PUSHED_TAG || `v${releaseVersion}`;
            const branchName = `release/${releaseVersion}`;
            
            try {
              const { data: pullRequest } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Release ${releaseVersion}`,
                head: branchName,
                base: 'main',
                body: `## üöÄ Release ${releaseVersion}
            
            This PR contains the version updates from the Maven release process:
            
            ### üì¶ Application Details
            - **Maven Profiles**: ${{ inputs.maven_profiles || 'none' }}
            
            ### üîÑ Version Changes
            - ‚úÖ **Released Version**: ${releaseVersion}
            - ‚úÖ **Created Tag**: \`v${releaseVersion}\`
            - ‚úÖ **Next Development Version**: ${nextVersion}
            
            ### üéØ What Happens Next
            1. **üöÄ Automatic Deployment**: The tag \`${pushedTag}\` will trigger the production deployment pipeline
            2. **üîÄ Merge This PR**: This will update the main branch with the new development version
            3. **üìù GitHub Release**: A GitHub release will be automatically created from the tag
            
            ### üìã Release Checklist
            - [ ] Review the version changes in this PR
            - [ ] Verify the production deployment completed successfully
            - [ ] Update release notes in the GitHub release
            - [ ] Notify stakeholders of the new release
            
            ### üîó Quick Links
            - [CI/CD Pipeline](../../actions/workflows/ci-cd.yml)
            - [Release Tag](../../releases/tag/${pushedTag})
            - [Production Monitoring](#) <!-- Add your monitoring links -->
            
            ---
            *This PR was automatically created by the Maven Release workflow*`,
                draft: false
              });
              
              console.log(`‚úÖ Created PR #${pullRequest.number}: ${pullRequest.html_url}`);
              
              // Add labels
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pullRequest.number,
                  labels: ['release', 'automated']
                });
                console.log('‚úÖ Added labels to PR');
              } catch (labelError) {
                console.log('‚ÑπÔ∏è  Could not add labels (labels may not exist):', labelError.message);
              }
              
              // Set output for summary
              core.setOutput('pr_number', pullRequest.number);
              core.setOutput('pr_url', pullRequest.html_url);
              
            } catch (error) {
              console.error('‚ùå Error creating PR:', error);
              throw error;
            }

      - name: Generate release summary
        if: always()
        run: |
          echo "## üéâ Maven Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            echo "### üîç Dry Run Completed" >> $GITHUB_STEP_SUMMARY
            echo "- **Mode**: Simulation only (no changes made)" >> $GITHUB_STEP_SUMMARY
            echo "- **Current Version**: $(mvn help:evaluate -Dexpression=project.version -q -DforceStdout 2>/dev/null || echo 'unknown')" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
              echo "- **Would Release (Override)**: ${{ needs.validate-inputs.outputs.release_version }}" >> $GITHUB_STEP_SUMMARY
              echo "- **Next Dev Version (Override)**: ${{ needs.validate-inputs.outputs.next_version }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Versioning**: Maven automatic versioning" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### üöÄ Release Completed Successfully" >> $GITHUB_STEP_SUMMARY
            echo "- **Released Version**: ${FINAL_RELEASE_VERSION:-unknown}" >> $GITHUB_STEP_SUMMARY
            echo "- **Git Tag**: ${PUSHED_TAG:-unknown}" >> $GITHUB_STEP_SUMMARY
            echo "- **Next Dev Version**: ${FINAL_NEXT_VERSION:-unknown}" >> $GITHUB_STEP_SUMMARY
            echo "- **Release Branch**: release/${FINAL_RELEASE_VERSION:-unknown}" >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
              echo "- **Versioning**: Used version overrides" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Versioning**: Maven automatic versioning" >> $GITHUB_STEP_SUMMARY
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. **üöÄ Production Deployment**: Tag \`${PUSHED_TAG}\` will trigger CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
            echo "2. **üîÄ Merge PR**: Review and merge the automatically created PR to update main branch" >> $GITHUB_STEP_SUMMARY
            echo "3. **üìù Release Notes**: Add release notes to the GitHub release created by the tag" >> $GITHUB_STEP_SUMMARY
            echo "4. **üìä Monitor**: Check production deployment and application health" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Related Links" >> $GITHUB_STEP_SUMMARY
          echo "- [üìã Actions Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ inputs.dry_run }}" != "true" ]]; then
            echo "- [üè∑Ô∏è Release Tag](https://github.com/${{ github.repository }}/releases/tag/${PUSHED_TAG})" >> $GITHUB_STEP_SUMMARY
            echo "- [üöÄ CI/CD Pipeline](https://github.com/${{ github.repository }}/actions/workflows/ci-cd.yml)" >> $GITHUB_STEP_SUMMARY
          fi

  # Cleanup job that runs on failure to clean up any partial state
  cleanup-on-failure:
    runs-on: arc-runners-javadev
    needs: [validate-inputs, maven-release]
    if: failure() && !inputs.dry_run
    steps:
      - name: Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 #v5

      - name: Configure Git
        run: |
          git config user.name "${{ inputs.git_user_name }}"
          git config user.email "${{ inputs.git_user_email }}"

      - name: Cleanup failed release
        run: |
          # Determine release version for cleanup
          if [[ "${{ needs.validate-inputs.outputs.use_version_overrides }}" == "true" ]]; then
            RELEASE_VERSION="${{ needs.validate-inputs.outputs.release_version }}"
            TAG_NAME="v${RELEASE_VERSION}"
          else
            # Try to find the tag that Maven created (should always have v prefix now)
            TAG_NAME=$(git tag --sort=-version:refname | head -1)
            RELEASE_VERSION=${TAG_NAME#v}  # Remove v prefix to get just the version
          fi
          
          BRANCH_NAME="release/${RELEASE_VERSION}"
          
          echo "üßπ Cleaning up failed release ..."
          echo "Release version: ${RELEASE_VERSION}"
          echo "Tag name: ${TAG_NAME}"
          echo "Branch name: ${BRANCH_NAME}"
          
          # Delete the tag if it was created
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Deleting local tag: ${TAG_NAME}"
            git tag -d "${TAG_NAME}" || true
            
            # Try to delete remote tag if it exists
            if git ls-remote --tags origin | grep -q "refs/tags/${TAG_NAME}$"; then
              echo "Deleting remote tag: ${TAG_NAME}"
              git push origin --delete "${TAG_NAME}" || true
            fi
          fi
          
          # Delete the release branch if it was created
          if git ls-remote --heads origin | grep -q "refs/heads/${BRANCH_NAME}$"; then
            echo "Deleting remote branch: ${BRANCH_NAME}"
            git push origin --delete "${BRANCH_NAME}" || true
          fi
          
          echo "‚úÖ Cleanup completed"

      - name: Add failure summary
        if: always()
        run: |
          echo "## ‚ùå Maven Release Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Maven release process failed and has been cleaned up." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üßπ Cleanup Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Removed any partially created tags" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Removed any partially created branches" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Reset repository to clean state" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîç Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. **üìù Check Logs**: Review the workflow logs for error details" >> $GITHUB_STEP_SUMMARY
          echo "2. **üîß Fix Issues**: Address any issues identified in the logs" >> $GITHUB_STEP_SUMMARY
          echo "3. **üîÑ Retry**: Re-run the release workflow once issues are resolved" >> $GITHUB_STEP_SUMMARY
          echo "4. **üí¨ Get Help**: Contact the DevOps team if you need assistance" >> $GITHUB_STEP_SUMMARY
