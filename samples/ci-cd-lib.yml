# Example CI/CD workflow for a Java library
# Location: Library repository at .github/workflows/ci-cd.yml
#
# This is the ONLY workflow file needed in your library repository.
# All the build/test/publish logic is handled by the shared workflow.

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'feat/**'
      - 'bugfix/**'
      - 'fix/**'
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:
  build-and-publish:
    # Call the shared workflow for Java libraries
    uses: krystof-io/github-workflows/.github/workflows/java-lib-build.yml@main
    with:
      # Required: Library name
      lib_name: my-library
      
      # Optional: Customize as needed (these show non-default values)
      # java_version: '21'           # Default: '17'
      # maven_profiles: 'extra'      # Default: ''
      
    secrets:
      MAVEN_REPO_USERNAME: ${{ secrets.MAVEN_REPO_USERNAME }}
      MAVEN_REPO_PASSWORD: ${{ secrets.MAVEN_REPO_PASSWORD }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

# That's it! The shared workflow handles:
# - Building and testing your library
# - Running SonarQube analysis (on main branch)
# - Publishing SNAPSHOT versions to maven-snapshots repository
# - Publishing release versions to maven-releases repository (on tags)
#
# No Docker images or Kubernetes deployments for libraries!